Version Alfa 1.0
 
 


A console utility takes 4 parameters (no protection against incorrect parameters, only incorrent parameter number)
1. First - in file. Is a text file with a column (no spaces) of numbers, double with dot . between integer and decimal part.
The numbers are a part of the output of the PHDFingers suite - numbers got as a result of a FRR comparison of different tries of one finger.
Числа - результаты сравнений своего пальца. Каждое число - результат одного сравнения с зарегистрированным отпечаткам.
Графики, полученные в результате анализа сравнений с разными зарегистрированными отпечатками, по идее, подлежат сравнению.


2. Second - output file
В выходном фале имеем две колонки. Первая - пороги (ось абсцисс на графике FRR)
Вторая - доля результатов сравнений, которые меньше того или иного порога, сиречь количество попыток, которые не прошли бы верификацию, будь такой порог выставлен в системе.  
Важный момент  -  
    if (val<=i)
            {
эта строчка кода говорит нам о том, что, если получен коэфф. близости, равный порогу, то палец не прошёл. Равных порогу чисел попадается немного, но желательно выяснить, а как оно в боевой системе?
Скорее всего не так, посему надо пофиксить.

Доля выводится в абсолютной величине, а не в процентах. Для процентов надо умножить на 100 (К.О.;-) ). Последняя строка, где порог 1, ВСЕГДА должна быть равна 1 (или 100%), так как при таком пороге НИКТО бы из своих не смог залогиниться (ибо см. выше). По факту это неверно, ибо эдак требуется, чтоб у чела порог был выше 1, чего невозможно в принципе.  Изменение val<i будет говорить о том, что "своими" считаются те, кто набрал порог и более порога, а val<=i - о том, что "своими" считаются те, кто порог превысил. 



3. Third - start
Это double число, с которого учитывать пороги. Понятное дело, что меньше 0.9 смысла нет устанавливать порог. 
Практически в системе сейчас используется порог 0.99. 

4. Fourth - step
Шаг, с которым считать пороги. Пороги считаются до 1. Меньше шаг - больше порогов, подробнее график, больше точек. Предлагается использовать 0.001, либо и того меньше. Важно понимать, что с каждым понижением порога в 10 раз в 10 раз же возрастает и количество точек. Это может привести к тому, что calc такое количество не переварит. Альзо, виндовый блокнот НЕ ЧИТАЕТ или некорректно читает большие текстовые файлы, их читает EMeditor или gedit в линуксах. 



For the second version:
1. Считывать полный кусок, посвящённый одному пальцу, строить массивы счётчиков по порогам, усреднять их и выдавать результирующий усреднённый график. 
Это будет график, игнорирующий небольшие (!) косяки в прокатках. Перед этим желательно глазом посмотреть, нет ли шибко выбивающихся, ибо усреднение очень болезненно реагирует на совсем плохие значения. Можно и в программу встроить проверялку на большие отклонения.
Надо сказать, что график - это возможный выхлоп многооткликовой модели, тогда количество откликов равно числу порогов (10000 откликов это вам не тут!)
2. Принимать на вход TableContendor из памяти (тогда пишется утилита. которая в tableContendor способна считать его же выхлоп (родить его обратно), или же жёстко стыкуем утилиту к PHDFingerprintSuite, а лучше и стыкуем, и standalone). Записи про один палец можно получать по подписи (каждая строка в файле, да и в контейнере подписана стандартным словом - к примеру leftthumb, rightlittle и так далее.

Последовательность прогона выглядит так
Снятие отпечатков (с сохранением всех шаблонов, иначе shell-скрипт с biotool-ом для создания тех шаблонов) -> 


Откликом может быть значение FRR в каком-то определённом месте, в каких-то замечательных точках, например 0.9 0.99 0.999 0.9999 (последнее - для начисто упоротых).
Остальные можно пошарить интерполяцией, которая хоть и будет кривоватая, но для дела сойдёт, наверное. 




